{
	"name": "pl_incremental_load",
	"properties": {
		"activities": [
			{
				"name": "control table",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "select watermarkvalue from dbo.watermarktable",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ds_control_table",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Source",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "Select max([insertdatetime]) as Last_M\nfrom orders\n",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ds_source_table",
						"type": "DatasetReference"
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "Copy data1",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "control table",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Source",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select * from orders where insertdatetime>'@{activity('control table').output.firstRow.watermarkvalue}' and insertdatetime<='@{activity('Source').output.firstRow.Last_M}'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "upsert",
						"upsertSettings": {
							"useTempDB": true,
							"keys": [
								"insertdatetime"
							]
						},
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "ds_source_table",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "ds_target_sqldb",
						"type": "DatasetReference",
						"parameters": {
							"Target_Table": "test"
						}
					}
				]
			},
			{
				"name": "Stored procedure1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Copy data1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[sp_highwatermark]",
					"storedProcedureParameters": {
						"NewTime": {
							"value": {
								"value": "@{activity('Source').output.firstRow.Last_M}",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"table_name": {
							"value": {
								"value": "dbo.watermarktable",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqldb",
					"type": "LinkedServiceReference"
				}
			}
		],
		"variables": {
			"varfile": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2025-02-01T09:57:24Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}